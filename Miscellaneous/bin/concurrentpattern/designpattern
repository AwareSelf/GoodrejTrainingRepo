
What is Executor Design Pattern? - A new pattern to launch threads.
Executor Design pattern can be defined as a particular type of design pattern that serves the 
purpose of decoupling the execution of a task from the real task taken by the user with the help 
of executors. Executors are specially designed to provide factory methods. 
These methods can be further used in the creation of ThreadPools of worker threads. 
It decouples the submission of a command from the execution of that very command.


What is Executor Service Pattern?
The Mediator Pattern defines an object that encapsulates how a set of objects interact. 
Mediator promotes loose coupling by keeping objects from referring to each other explicitly, 
and it lets you vary their interaction independently.

Rather than interacting directly with each other, objects ask the Mediator to interact on their 
behalf which results in reusability and loose coupling. 
It encapsulates the interaction between the objects and makes them independent from each other. 
This allows them to vary their interaction with other objects in a totally different way by 
implementing a different mediator. The Mediator helps to reduce the complexity of the classes. 

Each object no longer has to know in detail about how to interact with the other objects. 
The coupling between objects goes from tight and brittle to loose and agile.

Mediator Pattern in JDK
Design Patterns are used almost everywhere in JDK. 
The following are the usages of the Mediator Pattern in JDK.

java.util.concurrent.ScheduledExecutorService (all scheduleXXX() methods)
java.util.concurrent.ExecutorService (the invokeXXX() and submit() methods)
java.util.concurrent.Executor#execute()
java.util.Timer (all scheduleXXX() methods)
java.lang.reflect.Method#invoke()